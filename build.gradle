plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'me.will'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '15'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude module: 'logback-classic'
}

repositories {
    maven {
        url 'https://maven.aliyun.com/nexus/content/groups/public'
    }
    mavenCentral()
}

dependencies {
    // spring-boot相关
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'com.lmax:disruptor:3.4.2'

    //mybatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3'
    implementation 'com.baomidou:mybatis-plus-boot-starter:3.2.0'

    //一个鉴权工具
    implementation 'cn.dev33:sa-token:1.4.0'
    implementation 'cn.hutool:hutool-all:5.5.4'

    implementation 'org.reflections:reflections:0.9.12'

    //swagger api接口
    implementation 'com.github.xiaoymin:knife4j-spring-boot-starter:2.0.4'
    implementation 'io.springfox:springfox-swagger2:2.9.2'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

/**
 * 打包前更新版本
 */
task updateVersion {
    //获取版本java文件
    def versionFileDir = projectDir.getAbsolutePath() + File.separatorChar + 'src' + File.separatorChar + 'main' + File.separatorChar + 'java' + File.separatorChar + 'me' + File.separatorChar + 'will' + File.separatorChar + 'sb' + File.separatorChar + 'Version.java'
    //获取旧的版本
    def old = oldValue(versionFileDir, "VERSION")
    //找到版本号所在位置
    def index = old.indexOf('=')
    //生成新的版本
    def newVersion = old.substring(0, index + 1) + ' "' + version + '";'
    // 获得编译时间
    def now = new Date().format("yyyy-MM-dd HH:mm:ss")
    def oldDate = oldValue(versionFileDir, "DATE")
    index = oldDate.indexOf('=')
    def date = oldDate.substring(0, index + 1) + ' "' + now + '";'
    //替换
    def updateContent = new File(versionFileDir).getText('UTF-8').replaceAll(old,newVersion).replaceAll(oldDate,date)
    new File(versionFileDir).write(updateContent,'UTF-8')
}

def static oldValue(path, key) {
    def readString = ""
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine { str ->
            if (str.contains(key)) {
                readString = str
                return readString
            }
            return readString
        }
    }
    return readString
}
