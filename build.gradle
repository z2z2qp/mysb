plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'idea'
}

group = 'me.will'
version = '1.0.1-SNAPSHOT'

idea {
    module {
        downloadJavadoc(true)
        downloadSources(true)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven {
        url 'https://maven.aliyun.com/nexus/content/groups/public'
    }
    mavenCentral()
}

dependencies {
    // spring-boot相关
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.lmax:disruptor:3.4.4'

    //mybatis
//    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
//    implementation 'com.baomidou:mybatis-plus-boot-starter:3.5.1'
    implementation 'com.mybatis-flex:mybatis-flex-spring-boot-starter:1.7.3'
    implementation 'com.zaxxer:HikariCP'

    //一个鉴权工具
    implementation 'cn.dev33:sa-token-spring-boot3-starter:1.36.0'
    implementation 'cn.hutool:hutool-all:5.8.22'

    implementation 'org.reflections:reflections:0.10.2'

    //swagger api接口
    implementation 'com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:4.3.0'
//    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile).configureEach {
    options.encoding("UTF-8")
}
tasks.withType(Javadoc).configureEach {
    options.encoding("UTF-8")
}
/**
 * 打包前更新版本
 */
tasks.register('updateVersion') {
    //获取版本java文件
    String versionFileDir = projectDir.getAbsolutePath() + File.separatorChar + 'src' + File.separatorChar + 'main' + File.separatorChar + 'java' + File.separatorChar + 'me' + File.separatorChar + 'will' + File.separatorChar + 'sb' + File.separatorChar + 'Version.java'
    //获取旧的版本
    def old = oldValue(versionFileDir, "VERSION")
    //找到版本号所在位置
    def index = old.indexOf('=')
    //生成新的版本
    def newVersion = old.substring(0, index + 1) + ' "' + version + '";'
    // 获得编译时间
    String now = new Date().format("yyyy-MM-dd HH:mm:ss")
    String oldDate = oldValue(versionFileDir, "DATE")
    index = oldDate.indexOf('=')
    def date = oldDate.substring(0, index + 1) + ' "' + now + '";'
    //替换
    def updateContent = new File(versionFileDir).getText('UTF-8').replaceAll(old, newVersion).replaceAll(oldDate, date)
    new File(versionFileDir).write(updateContent, 'UTF-8')
}

def static oldValue(String path,String  key) {
    def readString = ""
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine { str ->
            if (str.contains(key)) {
                readString = str
                return readString
            }
            return readString
        }
    }
    return readString
}
